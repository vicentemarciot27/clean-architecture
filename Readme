# This is a simple Note Taking app

Where users can create, read, update, and delete (CRUD) notes. It adheres to Clean Architecture principles to separate concerns into different layers (Entities, Use Cases, Controllers, and Frameworks & Drivers).

It also utilizes Jest for unit and integration testing to ensure each layer and the overall system function correctly.

## Story
The NoteDrop app is a note taking app that allows users to take personal notes. They've hired ITAJúnior to make this app for them. They need their users to CRUD notes and, if possible, to be able to share notes with their friends inside the platform.

# Requirements

- [ ] **Functional Requirements**
    - [ ] **User Management**:
        - [ ] Register new users.
        - [ ] User login and authentication.
        - [ ] User profile management (e.g., change password, update email).

    - [ ] **Note Management**:
        - [ ] Create a new note.
        - [ ] Read/view an existing note.
        - [ ] Update/edit an existing note.
        - [ ] Delete a note.
        - [ ] Search for notes by title or content.
    
- [ ] **Non Functional**:
    - [ ] Share a note with another user on the platform.
    - [ ] View notes shared with the user.
    - [ ] Manage sharing settings (e.g., revoke access, set read-only or editable access).
    - [ ] Allow for note categorization or tagging.
    - [ ] Implement rich-text editing for notes.
    - [ ] Notifications for when a note is shared with a user.

- [ ] **Business Rules**:
    - [ ] A user may not be able to acess something they haven't created or that hasn't been shared with them
    - [ ] A user may not create more than 100 notes a day
    - [ ] A user may not be able to share more than 100 notes a day
    - [ ] A user may not be able to register an email with the same name,


### File Structure

The directory structure is extremely simple:

clean-architecture

```
├── src
│   ├── entities
│   ├── use_cases
│   ├── interfaces
│   │   ├── controllers
│   │   ├── repositories
│   │   └── adapters
│   └── frameworks
│       └── express
└── tests
```

1. **src**: This is the root directory for all source code.
    - **entities**: These are the core business objects of the application. They contain the business rules and logic.
    - **use_cases**: These describe how the system behaves.
    - **interfaces**:  This layer is a set of adapters that convert data from the format most convenient for the use cases and entities, to the format most convenient for some external agency such as a database or the web.
        - **controllers**: These handle incoming requests (like HTTP).
        - **repositories**: These represent the contracts that the inner circles (entities and use cases) expect the outer circle (data sources like databases) to implement.
        - **adapters**: These are the implementations of the interfaces. Allows objects with incompatible interfaces to work together. For example, if you have a repository interface for accessing data, you might have an adapter that implements this interface using SQL.
    - **frameworks**: This layer contains tools, libraries, and frameworks. This layer is meant to be a way to plug in necessary tools and frameworks without affecting the inner layers.
        - **express**: Using the Express framework for handling HTTP requests.
2. **tests**: This directory would contain all your test cases.

### Outside Libraries

This project uses the following libraries and modules:
    express,
    jest,
    supertest,
    babel,
    babel-jest,
    moment-js
